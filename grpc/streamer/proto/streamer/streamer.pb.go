// Code generated by protoc-gen-go. DO NOT EDIT.
// source: streamer.proto

package internal_streamer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_ebac906862b1a1d2, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_ebac906862b1a1d2, []int{1}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Message)(nil), "internal.streamer.Message")
	proto.RegisterType((*Empty)(nil), "internal.streamer.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamerClient is the client API for Streamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamerClient interface {
	// receives message ONLY from "consumer" service
	Receive(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error)
	// sends messages to any subscriber
	Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Streamer_SubscribeClient, error)
}

type streamerClient struct {
	cc *grpc.ClientConn
}

func NewStreamerClient(cc *grpc.ClientConn) StreamerClient {
	return &streamerClient{cc}
}

func (c *streamerClient) Receive(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/internal.streamer.Streamer/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamerClient) Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Streamer_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Streamer_serviceDesc.Streams[0], "/internal.streamer.Streamer/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streamer_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type streamerSubscribeClient struct {
	grpc.ClientStream
}

func (x *streamerSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamerServer is the server API for Streamer service.
type StreamerServer interface {
	// receives message ONLY from "consumer" service
	Receive(context.Context, *Message) (*Empty, error)
	// sends messages to any subscriber
	Subscribe(*Empty, Streamer_SubscribeServer) error
}

func RegisterStreamerServer(s *grpc.Server, srv StreamerServer) {
	s.RegisterService(&_Streamer_serviceDesc, srv)
}

func _Streamer_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamerServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.streamer.Streamer/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamerServer).Receive(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Streamer_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamerServer).Subscribe(m, &streamerSubscribeServer{stream})
}

type Streamer_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type streamerSubscribeServer struct {
	grpc.ServerStream
}

func (x *streamerSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _Streamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internal.streamer.Streamer",
	HandlerType: (*StreamerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _Streamer_Receive_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Streamer_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "streamer.proto",
}

func init() { proto.RegisterFile("streamer.proto", fileDescriptor_streamer_ebac906862b1a1d2) }

var fileDescriptor_streamer_ebac906862b1a1d2 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0x4d, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xcc, 0xcc, 0x2b, 0x49,
	0x2d, 0xca, 0x4b, 0xcc, 0xd1, 0x83, 0x49, 0x28, 0xc9, 0x72, 0xb1, 0xfb, 0xa6, 0x16, 0x17, 0x27,
	0xa6, 0xa7, 0x0a, 0x09, 0x71, 0xb1, 0x94, 0xa4, 0x56, 0x94, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70,
	0x06, 0x81, 0xd9, 0x4a, 0xec, 0x5c, 0xac, 0xae, 0xb9, 0x05, 0x25, 0x95, 0x46, 0x53, 0x18, 0xb9,
	0x38, 0x82, 0xa1, 0x9a, 0x84, 0x1c, 0xb9, 0xd8, 0x83, 0x52, 0x93, 0x53, 0x33, 0xcb, 0x52, 0x85,
	0xa4, 0xf4, 0x30, 0xcc, 0xd4, 0x83, 0x1a, 0x28, 0x25, 0x81, 0x45, 0x0e, 0x6c, 0x9a, 0x12, 0x83,
	0x90, 0x2b, 0x17, 0x67, 0x70, 0x69, 0x52, 0x71, 0x72, 0x51, 0x66, 0x52, 0xaa, 0x10, 0x4e, 0x85,
	0x52, 0x78, 0x8c, 0x57, 0x62, 0x30, 0x60, 0x4c, 0x62, 0x03, 0x7b, 0xcc, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0x9e, 0xd0, 0xb0, 0x53, 0xea, 0x00, 0x00, 0x00,
}
