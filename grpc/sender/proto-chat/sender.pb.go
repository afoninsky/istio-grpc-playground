// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sender.proto

package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	ReceiverVersion      string   `protobuf:"bytes,2,opt,name=receiverVersion,proto3" json:"receiverVersion,omitempty"`
	SenderVersion        string   `protobuf:"bytes,3,opt,name=senderVersion,proto3" json:"senderVersion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_sender_730c4aff0a2a57f1, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Message) GetReceiverVersion() string {
	if m != nil {
		return m.ReceiverVersion
	}
	return ""
}

func (m *Message) GetSenderVersion() string {
	if m != nil {
		return m.SenderVersion
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_sender_730c4aff0a2a57f1, []int{1}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Message)(nil), "test.Message")
	proto.RegisterType((*Empty)(nil), "test.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatClient interface {
	Listen(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Chat_ListenClient, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Listen(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Chat_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chat_serviceDesc.Streams[0], "/test.Chat/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_ListenClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatListenClient struct {
	grpc.ClientStream
}

func (x *chatListenClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer is the server API for Chat service.
type ChatServer interface {
	Listen(*Empty, Chat_ListenServer) error
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).Listen(m, &chatListenServer{stream})
}

type Chat_ListenServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chatListenServer struct {
	grpc.ServerStream
}

func (x *chatListenServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Chat_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sender.proto",
}

func init() { proto.RegisterFile("sender.proto", fileDescriptor_sender_730c4aff0a2a57f1) }

var fileDescriptor_sender_730c4aff0a2a57f1 = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0xcd, 0x4b,
	0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0x49, 0x2d, 0x2e, 0x51, 0x2a,
	0xe6, 0x62, 0xf7, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x92, 0xe0, 0x62, 0xcf, 0x85, 0x30,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x21, 0x0d, 0x2e, 0xfe, 0xa2, 0xd4, 0xe4,
	0xd4, 0xcc, 0xb2, 0xd4, 0xa2, 0xb0, 0xd4, 0xa2, 0xe2, 0xcc, 0xfc, 0x3c, 0x09, 0x26, 0xb0, 0x0a,
	0x74, 0x61, 0x21, 0x15, 0x2e, 0x5e, 0x88, 0x25, 0x30, 0x75, 0xcc, 0x60, 0x75, 0xa8, 0x82, 0x4a,
	0xec, 0x5c, 0xac, 0xae, 0xb9, 0x05, 0x25, 0x95, 0x46, 0x06, 0x5c, 0x2c, 0xce, 0x19, 0x89, 0x25,
	0x42, 0x1a, 0x5c, 0x6c, 0x3e, 0x99, 0xc5, 0x25, 0xa9, 0x79, 0x42, 0xdc, 0x7a, 0x20, 0x67, 0xe9,
	0x81, 0xa5, 0xa5, 0x78, 0x21, 0x1c, 0xa8, 0x03, 0x95, 0x18, 0x0c, 0x18, 0x93, 0xd8, 0xc0, 0x8e,
	0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xa4, 0x2f, 0xa6, 0xcc, 0x00, 0x00, 0x00,
}
